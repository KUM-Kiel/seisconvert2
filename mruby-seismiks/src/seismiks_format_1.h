static const char *seismiks_format_1_sql = "-- Schema for storing seismic data in a database.\n\nBEGIN;\n\n-- SQLite application_id and version\nPRAGMA application_id = 1936542579;\nPRAGMA user_version = 1;\n\n-- This table stores chunks of seismic data.\n-- Every chunk of data belongs to the channel referenced by \"channel_id\" and\n-- covers samples from \"start_offset\" to \"end_offset\". \"start offset\" is the\n-- offset of the first sample, so the first chunk of data in any channel has a\n-- \"start_offset\" of 0. \"end_offset\" is \"start_offset\" plus the number of\n-- samples in the chunk.\n-- The format of data is determined by the channels \"bit_depth\" field.\n-- It consists of the sample data stored as signed little-endian integers with\n-- no padding. The bit depth determines the number of bytes for each integer.\n-- Chunks should be about 100kB in size.\n-- Every chunk is compressed with the LZ4 frame compression format.\n-- See http://cyan4973.github.io/lz4/lz4_Frame_format.html\nCREATE TABLE data (\n  id INTEGER PRIMARY KEY,\n  channel_id INTEGER,\n  start_offset INTEGER,\n  end_offset INTEGER,\n  data BLOB);\n\n-- This table stores channels of a recording.\n-- Every channel has a name, belongs to a recording \"recording_id\" and is\n-- produced using the clock signal \"clock_id\".\n-- The channel contains \"length\" samples with the given \"bit_depth\".\n-- Only 8, 16, 24 and 32 are allowed bit depths.\n-- The comment may further describe the channnel. It might be a long name or\n-- instrument description.\nCREATE TABLE channels (\n  id INTEGER PRIMARY KEY,\n  name TEXT,\n  length INTEGER,\n  bit_depth INTEGER,\n  clock_id INTEGER,\n  recording_id INTEGER,\n  gain REAL,\n  comment TEXT);\n\n-- This table stores clock signals used to create a digital signal.\n-- Every channel has an associated clock, which controls the taking of samples.\n-- If two channels have the same rate and are synchronized, they should use the\n-- same clock.\nCREATE TABLE clocks (\n  id INTEGER PRIMARY KEY,\n  rate REAL);\n\n-- This table stores recordings.\n-- Every recording has a name, an optional comment and is recorded by a station.\nCREATE TABLE recordings (\n  id INTEGER PRIMARY KEY,\n  name TEXT,\n  station_id INTEGER,\n  comment TEXT);\n\n-- This table stores real time clocks.\n-- \"name\" should be a unique identifier, such as the model and serial number.\nCREATE TABLE rtcs (\n  id INTEGER PRIMARY KEY,\n  name TEXT);\n\n-- A clock signal can be measured and controlled by a real time clock.\n-- This table stores times \"time\" as measured by the rtc \"rtc_id\" at sample\n-- number \"sample_number\" of clock \"clock_id\".\n-- Every clock should have at least one rtc reading for sample 0.\nCREATE TABLE rtc_readings (\n  id INTEGER PRIMARY KEY,\n  clock_id INTEGER,\n  rtc_id INTEGER,\n  sample_number INTEGER,\n  time TEXT);\n\n-- This table stores the offset \"offset\" in seconds of the rtc \"rtc_id\" at time\n-- \"time\" as measured by the rtc. Adding the offset to the measured time will\n-- yield the actual time at this instant.\n-- Several of this measurements can be used to correct data for clock skew.\nCREATE TABLE rtc_offsets (\n  id INTEGER PRIMARY KEY,\n  rtc_id INTEGER,\n  time TEXT,\n  offset REAL);\n\n-- This table stores stations.\nCREATE TABLE stations (\n  id INTEGER PRIMARY KEY,\n  name TEXT,\n  comment TEXT);\n\n-- This table stores position traces of a given station \"station_id\" at given\n-- times \"time\" measured by rtc \"rtc_id\".\n-- \"latitude\" encodes the geographical latitude in degrees. North is positive,\n-- the equator is zero.\n-- \"longitude\" encodes the geographical longitude in degrees. East is positive,\n-- the meridian passing through Greenwich is zero.\n-- \"height\" encodes the height above sea level in meters. If the recorder is\n-- submerged, this number is negative.\n-- The rotations are specified in Euler z-x'-z\" convention. Starting from a\n-- coordinate system where x is east, y is north and z is up, \"rotation1\"\n-- encodes a counterclockwise rotation in degrees around the z axis of this\n-- coordinate system. If \"rotation2\" and \"rotation3\" are not given, the\n-- resulting coordinate system is the recorders local coordinate system.\n-- \"rotation2\" encodes a counterclockwise rotation in degrees around the x axis\n-- of the coordinate system rotated by \"rotation1\".\n-- \"rotation3\" encodes a counterclockwise rotation in degrees around the z axis\n-- of the coordinate system rotated by \"rotation1\" and \"rotation2\".\n-- If \"rotation2\" or \"rotation3\" are given, all three rotations should be given.\n-- Any values, which are unknown or not needed, can be NULL.\nCREATE TABLE positions (\n  id INTEGER PRIMARY KEY,\n  station_id INTEGER,\n  time TEXT,\n  rtc_id INTEGER,\n  latitude REAL,\n  longitude REAL,\n  height REAL,\n  rotation1 REAL,\n  rotation2 REAL,\n  rotation3 REAL,\n  water_depth REAL,\n  comment TEXT);\n\nCOMMIT;\n";
static const int seismiks_format_1_sql_size = 4727;
